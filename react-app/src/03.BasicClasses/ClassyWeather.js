import React from "react";

function getWeatherIcon(wmoCode) {
  const icons = new Map([
    [[0], "‚òÄÔ∏è"],
    [[1], "üå§"],
    [[2], "‚õÖÔ∏è"],
    [[3], "‚òÅÔ∏è"],
    [[45, 48], "üå´"],
    [[51, 56, 61, 66, 80], "üå¶"],
    [[53, 55, 63, 65, 57, 67, 81, 82], "üåß"],
    [[71, 73, 75, 77, 85, 86], "üå®"],
    [[95], "üå©"],
    [[96, 99], "‚õà"],
  ]); // Map ch·ª©a c√°c icon t∆∞∆°ng ·ª©ng v·ªõi m√£ s·ªë th·ªùi ti·∫øt
  const arr = [...icons.keys()].find((key) => key.includes(wmoCode)); // T√¨m m√£ s·ªë th·ªùi ti·∫øt trong Map
  if (!arr) return "NOT FOUND"; // N·∫øu kh√¥ng t√¨m th·∫•y th√¨ tr·∫£ v·ªÅ NOT FOUND
  return icons.get(arr); // Tr·∫£ v·ªÅ icon t∆∞∆°ng ·ª©ng v·ªõi m√£ s·ªë th·ªùi ti·∫øt
} // H√†m tr·∫£ v·ªÅ icon t∆∞∆°ng ·ª©ng v·ªõi m√£ s·ªë th·ªùi ti·∫øt

function convertToFlag(countryCode) {
  const codePoints = countryCode
    .toUpperCase()
    .split("")
    .map((char) => 127397 + char.charCodeAt()); // Chuy·ªÉn m√£ qu·ªëc gia th√†nh m√£ Unicode
  return String.fromCodePoint(...codePoints); // Tr·∫£ v·ªÅ c·ªù qu·ªëc gia t∆∞∆°ng ·ª©ng v·ªõi m√£ qu·ªëc gia
} // H√†m tr·∫£ v·ªÅ c·ªù qu·ªëc gia t∆∞∆°ng ·ª©ng v·ªõi m√£ qu·ªëc gia

function formatDay(dateStr) {
  return new Intl.DateTimeFormat("en", {
    weekday: "short",
  }).format(new Date(dateStr));
} // H√†m tr·∫£ v·ªÅ ng√†y trong tu·∫ßn t∆∞∆°ng ·ª©ng v·ªõi ng√†y th√°ng nƒÉm

class ClassyWeather extends React.Component {
  // C√≥ th·ªÉ kh√¥ng c·∫ßn constructo m√† khai b√°o state tr·ª±c ti·∫øp `state = {}`
  // T∆∞∆°ng t·ª± n·∫øu kh√¥ng c·∫ßn bind method th√¨ c√≥ th·ªÉ vi·∫øt method d∆∞·ªõi d·∫°ng arrow function `fetchWeather = async () => {}` v√¨ arrow function kh√¥ng t·∫°o ra context ri√™ng
  constructor(props) {
    super(props); // G·ªçi h√†m kh·ªüi t·∫°o c·ªßa l·ªõp cha (React.Component) v·ªõi tham s·ªë props
    this.state = {
      location: "", // Kh·ªüi t·∫°o gi√° tr·ªã nh·∫≠p li·ªáu cho √¥ input
      isLoading: false, // Kh·ªüi t·∫°o gi√° tr·ªã ban ƒë·∫ßu cho state isLoading
      displayLocation: "", // Kh·ªüi t·∫°o gi√° tr·ªã ban ƒë·∫ßu cho state displayLocation
      weatherData: {}, // Kh·ªüi t·∫°o gi√° tr·ªã ban ƒë·∫ßu cho state weatherData
    }; // Kh·ªüi t·∫°o gi√° tr·ªã ban ƒë·∫ßu cho state cho Class Component
    this.fetchWeather = this.fetchWeather.bind(this); // Bind v·ªõi this ƒë·ªÉ s·ª≠ d·ª•ng this ch√≠nh l√† Class Component n√†y
  }
  async fetchWeather() {
    if (this.state.location.length < 2) { // N·∫øu ƒë·ªô d√†i c·ªßa location nh·ªè h∆°n 2
      this.setState({ weatherData: {} }); // C·∫≠p nh·∫≠t gi√° tr·ªã cho state weatherData ƒë·ªÉ unmount component Weather
      return; // K·∫øt th√∫c h√†m fetchWeather
    }
    try {
      this.setState({ isLoading: true }); // C·∫≠p nh·∫≠t gi√° tr·ªã cho state isLoading, kh√¥ng c·∫ßn ph·∫£i spread c·∫£ object v√¨ trong class kh√¥ng khai b√°o state l√† 1 constant
      // 1) L·∫•y th√¥ng tin ƒë·ªãa l√Ω
      const geoRes = await fetch(
        `https://geocoding-api.open-meteo.com/v1/search?name=${this.state.location}`
      );
      const geoData = await geoRes.json();
      console.log(geoData);

      if (!geoData.results) throw new Error("Location not found");

      const { latitude, longitude, timezone, name, country_code } =
        geoData.results.at(0); // L·∫•y th√¥ng tin ƒë·ªãa l√Ω t·ª´ k·∫øt qu·∫£ tr·∫£ v·ªÅ (l·∫•y k·∫øt qu·∫£ ƒë·∫ßu ti√™n)
      this.setState({
        displayLocation: `${name} ${convertToFlag(country_code)}`,
      }); // C·∫≠p nh·∫≠t gi√° tr·ªã cho state displayLocation, kh√¥ng c·∫ßn ph·∫£i spread c·∫£ object v√¨ trong class kh√¥ng khai b√°o state l√† 1 constant

      // 2) L·∫•y th√¥ng tin th·ªùi ti·∫øt
      const weatherRes = await fetch(
        `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&timezone=${timezone}&daily=weathercode,temperature_2m_max,temperature_2m_min`
      );
      const weatherData = await weatherRes.json();
      this.setState({ weatherData: weatherData.daily }); // C·∫≠p nh·∫≠t gi√° tr·ªã cho state weatherData, kh√¥ng c·∫ßn ph·∫£i spread c·∫£ object v√¨ trong class kh√¥ng khai b√°o state l√† 1 constant
    } catch (err) {
      console.log(err);
    } finally {
      this.setState({ isLoading: false }); // C·∫≠p nh·∫≠t gi√° tr·ªã cho state isLoading, kh√¥ng c·∫ßn ph·∫£i spread c·∫£ object v√¨ trong class kh√¥ng khai b√°o state l√† 1 constant
    }
  }

  // Kh√¥ng c·∫ßn bind th√¨ d√πng arrow function
  setLocation = (e) => this.setState({ location: e.target.value });

  componentDidMount() {
    this.setState({location: localStorage.getItem("location") || ""}) // L·∫•y gi√° tr·ªã location t·ª´ localStorage n·∫øu c√≥ ho·∫∑c ƒë·ªÉ gi√° tr·ªã r·ªóng
  } // Lifecycle method ƒë∆∞·ª£c g·ªçi sau khi component ƒë∆∞·ª£c render l·∫ßn ƒë·∫ßu ti√™n

  componentDidUpdate(prevProps, prevState){
    if(prevState.location !== this.state.location){ // N·∫øu gi√° tr·ªã location thay ƒë·ªïi
      this.fetchWeather(); // G·ªçi h√†m fetchWeather
      localStorage.setItem("location", this.state.location) // L∆∞u gi√° tr·ªã location v√†o localStorage
    }
  } // Lifecycle method ƒë∆∞·ª£c g·ªçi sau khi component ƒë∆∞·ª£c c·∫≠p nh·∫≠t (props ho·∫∑c state) v√† tr∆∞·ªõc khi render l·∫°i

  render() {
    return (
      <div className="app">
        <h1>Classy Weather</h1>
        <Input location={this.state.location} setLocation={this.setLocation} />
        <div>
          {this.state.isLoading && <p className="loader">Loading...</p>}
          {this.state.weatherData.weathercode && (
            <Weather
              weather={this.state.weatherData}
              location={this.state.displayLocation}
            /> // Truy·ªÅn props cho Weather Component
          )}
        </div>
      </div>
    );
  }
}

class Input extends React.Component {
  render() {
    return (
      <div>
        <input
          type="text"
          placeholder="Search location..."
          value={this.props.location} // L·∫•y gi√° tr·ªã location t·ª´ props c·ªßa class Classy Weather
          onChange={this.props.setLocation} // L·∫•y function ƒë∆∞·ª£c truy·ªÅn v√†o props t·ª´ Classy Weather
        />
      </div>
    );
  }
}

class Weather extends React.Component {
  componentWillUnmount(){
    alert("Weather component will be unmounted");
  } // Lifecycle method ƒë∆∞·ª£c g·ªçi tr∆∞·ªõc khi component b·ªã unmount
  render() {
    const {
      temperature_2m_max: max,
      temperature_2m_min: min,
      time,
      weathercode,
    } = this.props.weather;
    const location = this.props.location;
    return (
      <div>
        <h2>Weather {location}</h2>
        <ul className="weather">
          {time.map((day, i) => {
            return (
              <Day
                key={i}
                day={formatDay(day)}
                max={max[i]}
                min={min[i]}
                weatherCode={weathercode[i]}
              />
            );
          })}
        </ul>
      </div>
    );
  }
}

class Day extends React.Component {
  render() {
    const { day, max, min, weatherCode } = this.props;
    return (
      <li className="day">
        <span>{getWeatherIcon(weatherCode)}</span>
        <p>{day}</p>
        <p className="important">
          {Math.floor(min)}&deg; &mdash; <strong>{Math.ceil(max)}&deg;</strong>
        </p>
      </li>
    );
  }
}

export default ClassyWeather;
