import { useEffect, useState } from "react";

const tempMovieData = [
  {
    imdbID: "tt1375666",
    Title: "Inception",
    Year: "2010",
    Poster:
      "https://m.media-amazon.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg",
  },
  {
    imdbID: "tt0133093",
    Title: "The Matrix",
    Year: "1999",
    Poster:
      "https://m.media-amazon.com/images/M/MV5BNzQzOTk3OTAtNDQ0Zi00ZTVkLWI0MTEtMDllZjNkYzNjNTc4L2ltYWdlXkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_SX300.jpg",
  },
  {
    imdbID: "tt6751668",
    Title: "Parasite",
    Year: "2019",
    Poster:
      "https://m.media-amazon.com/images/M/MV5BYWZjMjk3ZTItODQ2ZC00NTY5LWE0ZDYtZTI3MjcwN2Q5NTVkXkEyXkFqcGdeQXVyODk4OTc3MTY@._V1_SX300.jpg",
  },
];

const tempWatchedData = [
  {
    imdbID: "tt1375666",
    Title: "Inception",
    Year: "2010",
    Poster:
      "https://m.media-amazon.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg",
    runtime: 148,
    imdbRating: 8.8,
    userRating: 10,
  },
  {
    imdbID: "tt0088763",
    Title: "Back to the Future",
    Year: "1985",
    Poster:
      "https://m.media-amazon.com/images/M/MV5BZmU0M2Y1OGUtZjIxNi00ZjBkLTg1MjgtOWIyNThiZWIwYjRiXkEyXkFqcGdeQXVyMTQxNzMzNDI@._V1_SX300.jpg",
    runtime: 116,
    imdbRating: 8.5,
    userRating: 9,
  },
];

const KEY = "1cb2b989";

const average = (arr) =>
  arr.reduce((acc, cur, i, arr) => acc + cur / arr.length, 0);

export default function App() {
  const [query, setQuery] = useState("");
  const [movies, setMovies] = useState([]);
  const [watched, setWatched] = useState([]);
  const [loading, setLoading] = useState(false); // loading l√† m·ªôt state ƒë·ªÉ x·ª≠ l√Ω vi·ªác loading khi fetch data, n·∫øu data ch∆∞a ƒë∆∞·ª£c fetch th√¨ s·∫Ω hi·ªán loading
  const [error, setError] = useState(null); // error l√† m·ªôt state ƒë·ªÉ x·ª≠ l√Ω vi·ªác b√°o l·ªói khi fetch data
  const [selectedId, setSelectedId] = useState(null); // selectedId l√† m·ªôt state ƒë·ªÉ x·ª≠ l√Ω vi·ªác hi·ªán th√¥ng tin phim ƒë√£ xem
  const handleSelectMovie = (id) => setSelectedId(selectedId => selectedId === id ? null : id); // handleSelectMovie l√† m·ªôt eventHandler ƒë·ªÉ x·ª≠ l√Ω vi·ªác hi·ªán th√¥ng tin phim ƒë√£ xem
  const handleCloseMovie = () => setSelectedId(null); // handleCloseMovie l√† m·ªôt eventHandler ƒë·ªÉ x·ª≠ l√Ω vi·ªác ƒë√≥ng th√¥ng tin phim ƒë√£ xem
  useEffect(() => {
    // useEffect s·∫Ω ch·∫°y sau khi render xong, n√≥ s·∫Ω mount v√†o DOM v√† ch·∫°y
    // N·∫øu kh√¥ng c√≥ dependency array th√¨ useEffect s·∫Ω ch·∫°y sau m·ªói l·∫ßn render, nh∆∞ v√¢y s·∫Ω g√¢y ra v√≤ng l·∫∑p v√¥ h·∫°n
    // N√≥ kh√°c v·ªõi eventHandler, eventHandler s·∫Ω ch·∫°y khi c√≥ s·ª± ki·ªán x·∫£y ra, c√≤n useEffect s·∫Ω ch·∫°y sau khi render xong
    const loadMovies = async () => {
      try {
        setLoading(true); // N·∫øu data ch∆∞a ƒë∆∞·ª£c fetch th√¨ s·∫Ω hi·ªán loading
        setError(""); // fetch ƒë∆∞·ª£c data th√¨ s·∫Ω kh√¥ng c√≥ l·ªói
        const res = await fetch(
          `http://www.omdbapi.com/?i=tt3896198&apikey=${KEY}&s=${query}`
        );
        if (!res.ok) throw new Error("Something went wrong"); // N·∫øu fetch data b·ªã l·ªói th√¨ s·∫Ω throw error (m·∫•t m·∫°ng, api kh√¥ng ho·∫°t ƒë·ªông, ...)
        const data = await res.json();
        setMovies(data.Search); // C√°c state l√† h√†m b·∫•t ƒë·ªìng b·ªô
        console.log(data.Search); // S·∫Ω tr·∫£ v·ªÅ m·ªôt m·∫£ng c√°c phim, nh∆∞ng n·∫øu console.log(movies) th√¨ s·∫Ω tr·∫£ v·ªÅ m·∫£ng r·ªóng
        // v√¨ setMovies l√† h√†m b·∫•t ƒë·ªìng b·ªô n√™n n√≥ ch·∫°y sau khi console.log
      } catch (err) {
        setError(err.message); // N·∫øu fetch data b·ªã l·ªói th√¨ s·∫Ω b√°o l·ªói
      } finally {
        setLoading(false); // N·∫øu fetch data th√†nh c√¥ng, ho·∫∑c kh√¥ng th√¨ s·∫Ω t·∫Øt loading
      }
      if (query.length < 3) {
        setMovies([]);
      }
    };
    loadMovies(); // N√™n t·∫°o h√†m b·∫•t ƒë·ªìng b·ªô trong useEffect ƒë·ªÉ tr√°nh l·ªói
  }, [query]); // [] l√† dependency array, n·∫øu c√≥ thay ƒë·ªïi th√¨ useEffect s·∫Ω ch·∫°y l·∫°i

  return (
    <>
      <Nav movies={movies} query={query} setQuery={setQuery}>
        <Search query={query} setQuery={setQuery} />
        <NumResults movies={movies} />
      </Nav>
      <Main>
        <Box>
          {loading && <Loader />}{" "}
          {/* N·∫øu data ch∆∞a ƒë∆∞·ª£c fetch th√¨ s·∫Ω hi·ªán loading */}
          {!loading && !error && <MovieList movies={movies} selectMovie={handleSelectMovie}/>}{" "}
          {/* N·∫øu data ƒë√£ ƒë∆∞·ª£c fetch v√† kh√¥ng c√≥ l·ªói th√¨ s·∫Ω hi·ªán danh s√°ch phim */}
          {error && <ErrorMessage message={error} />}{" "}
          {/* N·∫øu fetch data b·ªã l·ªói th√¨ s·∫Ω b√°o l·ªói */}
        </Box>
        <Box>
          {selectedId ? (
            <MovieDetails selectedId={selectedId} closeMovie={handleCloseMovie} />
          ) : (
            <>
              <WatchedSummary watched={watched} />
              <WatchedMoviesList watched={watched} />
            </>
          )}
        </Box>
      </Main>
    </>
  );
}

// Component Nav ƒë·ªÉ hi·ªán navbar
const Nav = ({ children }) => {
  return (
    <nav className="nav-bar">
      <Logo />
      {children}
    </nav>
  );
};

// Component Logo ƒë·ªÉ hi·ªán logo
const Logo = () => {
  return (
    <div className="logo">
      <span role="img">üçø</span>
      <h1>usePopcorn</h1>
    </div>
  );
};

// Component MovieList ƒë·ªÉ hi·ªán danh s√°ch phim
const MovieList = ({ movies, selectMovie }) => {
  return (
    <ul className="list list-movies">
      {movies?.map((movie) => (
        <Movie key={movie.imdbID} movie={movie} selectMovie={selectMovie}/>
      ))}
    </ul>
  );
};

// Component Movie ƒë·ªÉ hi·ªán th√¥ng tin phim
const Movie = ({ movie, selectMovie }) => {
  return (
    <li onClick={() => selectMovie(movie.imdbID)}>
      <img src={movie.Poster} alt={`${movie.Title} poster`} />
      <h3>{movie.Title}</h3>
      <div>
        <p>
          <span>üóì</span>
          <span>{movie.Year}</span>
        </p>
      </div>
    </li>
  );
};

// Component WatchedSummary ƒë·ªÉ hi·ªán th√¥ng tin phim ƒë√£ xem
const WatchedSummary = ({ watched }) => {
  const avgImdbRating = average(watched.map((movie) => movie.imdbRating));
  const avgUserRating = average(watched.map((movie) => movie.userRating));
  const totalRuntime = watched.reduce((acc, cur) => acc + cur.runtime, 0);
  return (
    <div className="summary">
      <h2>Movies you watched</h2>
      <div>
        <p>
          <span>#Ô∏è‚É£</span>
          <span>{watched.length} movies</span>
        </p>
        <p>
          <span>‚≠êÔ∏è</span>
          <span>{avgImdbRating}</span>
        </p>
        <p>
          <span>üåü</span>
          <span>{avgUserRating}</span>
        </p>
        <p>
          <span>‚è≥</span>
          <span>{totalRuntime} min</span>
        </p>
      </div>
    </div>
  );
};

// Component Loader ƒë·ªÉ hi·ªán loading khi data ch∆∞a ƒë∆∞·ª£c fetch
const Loader = () => {
  return <p className="loader">Loading...</p>;
};

// Component Error ƒë·ªÉ hi·ªán error khi fetch data b·ªã l·ªói
const ErrorMessage = ({ message }) => {
  return (
    <p className="error">
      <span>‚õî{message}</span>
    </p>
  );
};

// Component Search ƒë·ªÉ t√¨m ki·∫øm phim
const Search = ({ query, setQuery }) => {
  return (
    <input
      className="search"
      type="text"
      placeholder="Search movies..."
      value={query}
      onChange={(e) => setQuery(e.target.value)}
    />
  );
};

// Component NumResults ƒë·ªÉ hi·ªán s·ªë l∆∞·ª£ng phim t√¨m ki·∫øm ƒë∆∞·ª£c
const NumResults = ({ movies }) => {
  return (
    movies && // N·∫øu c√≥ movies th√¨ s·∫Ω hi·ªán s·ªë l∆∞·ª£ng phim t√¨m ki·∫øm ƒë∆∞·ª£c
    <p className="num-results">
      <span>{movies.length}</span> results
    </p>
  );
};

// Component Main ƒë·ªÉ hi·ªán n·ªôi dung ch√≠nh
const Main = ({ children }) => {
  return <main className="main">{children}</main>;
};

// Component Box ƒë·ªÉ hi·ªán c√°c box ch·ª©a n·ªôi dung
const Box = ({ children }) => {
  const [isOpen, setIsOpen] = useState(true); // isOpen l√† m·ªôt state ƒë·ªÉ x·ª≠ l√Ω vi·ªác m·ªü r·ªông box
  return (
    <div className="box">
      <button className="btn-toggle" onClick={() => setIsOpen((open) => !open)}>
        {isOpen ? "-" : "+"}
      </button>
      {isOpen && children}
    </div>
  );
};

// Component WatchedMoviesList ƒë·ªÉ hi·ªán danh s√°ch phim ƒë√£ xem
const WatchedMoviesList = ({ watched }) => {
  return (
    <ul className="list">
      {watched?.map((movie) => (
        <li key={movie.imdbID}>
          <img src={movie.Poster} alt={`${movie.Title} poster`} />
          <h3>{movie.Title}</h3>
          <div>
            <p>
              <span>üóì</span>
              <span>{movie.Year}</span>
            </p>
            <p>
              <span>‚è±</span>
              <span>{movie.runtime} min</span>
            </p>
            <p>
              <span>‚≠êÔ∏è</span>
              <span>{movie.imdbRating}</span>
            </p>
            <p>
              <span>üåü</span>
              <span>{movie.userRating}</span>
            </p>
          </div>
        </li>
      ))}
    </ul>
  );
};

// Component MovieDetails ƒë·ªÉ hi·ªán th√¥ng tin phim ƒë√£ xem
const MovieDetails = ({ selectedId, closeMovie }) => {
  return (
    <div className="details">
      <button className="btn-back" onClick={closeMovie}>&larr;</button>
      {selectedId}
    </div>
  );
};
